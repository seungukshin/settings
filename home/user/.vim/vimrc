""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
" vim plug
Plug 'junegunn/vim-plug'
" fzf
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'
" color scheme
Plug 'crusoexia/vim-monokai'
" unite
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Shougo/unite.vim'
Plug 'Shougo/neomru.vim'
Plug 'tsukkee/unite-tag'
Plug 'amitab/vim-unite-cscope'
Plug 'hewes/unite-gtags'
" lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/vim-lsp-settings'
" tagbar
Plug 'majutsushi/tagbar'
" vcs
Plug 'http://repo.or.cz/vcscommand.git'
Plug 'mhinz/vim-signify'
" search count
Plug 'osyo-manga/vim-anzu'
" paren
Plug 'kien/rainbow_parentheses.vim'
Plug 'jiangmiao/auto-pairs'
" nerdtree
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'scrooloose/nerdtree-project-plugin'
Plug 'PhilRunninger/nerdtree-buffer-ops'
Plug 'PhilRunninger/nerdtree-visual-selection'
" icon
Plug 'ryanoasis/vim-devicons'
" color
Plug 'powerman/vim-plugin-AnsiEsc'
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" taglist
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tagbar_width=30
let g:tagbar_left=0
let g:tagbar_autofocus=0
"autocmd VimEnter * nested :TagbarOpen
"autocmd VimEnter * nested :call tagbar#autoopen(1)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" signify
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:signify_vcs_list=[ 'git', 'svn' ]
let g:signify_sign_overwrite=1
let g:signify_update_on_focusgained=1
let g:signify_update_on_bufenter=1
let g:signify_line_highlight=0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" anzu
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" if start anzu-mode key mapping
" anzu-mode is anzu(12/51) in screen
" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" rainbow parentheses
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd VimEnter * RainbowParenthesesToggleAll
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Keep 50 lines of command line history
set history=50

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader=" "
let g:mapleader=" "

" Fast saving
nmap <leader>w :w<cr>

" Use the system clipboard
if system('uname -s') == "Darwin\n"
	set clipboard=unnamed
else
	set clipboard=unnamedplus
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User Interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Color theme
set background=dark
colorscheme monokai
set guifont=D2Coding\ 12
" disable menu
set guioptions-=m
" disable toolbar
set guioptions-=T
" disable scrollbar
set guioptions-=r
set guioptions-=L

" Set extra options when running in GUI mode
if &t_Co > 2 || has("gui_running")
	set guioptions-=T
	set guioptions+=e
	set t_Co=256
	set guitablabel=%M\ %t
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hidden

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Display incomplete commands
set showcmd

" Display white space
set list
set listchars=eol:$,tab:>-
hi NonText ctermfg=238 guifg=#444444
hi SpecialKey ctermfg=238 guifg=#444444

" Display line number
set nu

" Display current line
"hi CursorLine term=bold cterm=bold ctermbg=DarkBlue gui=bold
set cursorline

" Display culumn mark
set colorcolumn=78

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight the last used search pattern
set hlsearch

" Do incremental searching
set incsearch

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files, backups and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set utf8 as standard encoding and en_US as the standard language
set enc=utf-8
set fencs=utf-8,cp949

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
"set backupdir=~/.vim/backup
set nobackup
set nowritebackup
set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Be smart when using tabs
set smarttab

" No word wrap
set nowrap

" Linebreak on 500 characters
set lbr
set tw=500

" Use tabs
set noexpandtab

" indent
set copyindent
set preserveindent
set autoindent
set smartindent

" 1 tab = 8 spaces
set softtabstop=0
set shiftwidth=8
set tabstop=8

autocmd FileType *
	\ set tabstop=8 |
	\ set softtabstop=0 |
	\ set shiftwidth=8 |
	\ set smarttab |
	\ set noexpandtab |
	\ set copyindent |
	\ set preserveindent |
	\ set autoindent |
	\ set smartindent

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Moving around, tabs, windows and buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Switch windows
nmap <Tab> <C-W>

" emacs binding
inoremap <C-A> <Home>
inoremap <C-E> <End>
inoremap <C-B> <Left>
inoremap <C-F> <Right>
inoremap <C-P> <Up>
inoremap <C-N> <Down>
inoremap <C-D> <Del>
inoremap <C-K> <Esc>lDa
inoremap <C-U> <Esc>d0xi
inoremap <C-Y> <Esc>Pa
inoremap <C-X><C-S> <Esc>:w<CR>a
inoremap <M-V> <PageDown>
inoremap <C-V> <PageUp>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Move between tabs
map <C-W>n :tabnext<cr>
map <C-W>p :tabprevious<cr>

" Opens a new tab with the current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
"map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
	set switchbuf=useopen,usetab,newtab
	set stal=2
catch
endtry

" insert date
inoremap <C-R> <C-R>=strftime("%Y-%m-%d")<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Display the status line all the time
set laststatus=2

" Enable buffer management for vcscommand
let VCSCommandEnableBufferSetup=1

" Format the status line
set statusline=%r					"read only flag
set statusline+=%m					"modified flag
set statusline+=%{HasPaste()}%F\ 			"filename
set statusline+=%y\ 					"filetype
set statusline+=%{tagbar#currenttag('%s','')}\ 		"function name
set statusline+=%{VCSCommandGetStatusLine()}		"branch
"set statusline+=%{getcwd()}				"pwd
set statusline+=%h					"help file flag
set statusline+=%=					"left/right separator
set statusline+=%{anzu#search_status()}\ \|\ 		"search
set statusline+=%{strlen(&fenc)?&fenc:'none'}\ \|\ 	"file encoding
set statusline+=%{&ff}\ \|\ 				"file format
set statusline+=%c,					"cursor column
set statusline+=%l/%L\ 					"cursor/total lines
set statusline+=%P					"percent through file

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
"map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
	nmap <D-j> <M-j>
	nmap <D-k> <M-k>
	vmap <D-j> <M-j>
	vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Remember info about open buffers on close
set viminfo^=%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimgrep searching and cope displaying
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
"map <leader>cc :botright cope<cr>
"map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
"map <leader>n :cn<cr>
"map <leader>p :cp<cr>

"nmap <C-\>a :grep! -R "<cword>" *<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checking
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeShowBookmarks=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" lsp
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lsp_auto_enable=1
let g:lsp_fold_enabled=1
nnoremap <leader>ls :<C-u>LspReferences<CR>
nnoremap <leader>lg :<C-u>LspDefinition<CR>
nnoremap <leader>ld :<C-u>LspDeclaration<CR>
nnoremap <leader>lc :<C-u>LspCallHierarchyIncoming<CR>
nnoremap <leader>lt :<C-u>LspCallHierarchyOutgoing<CR>
nnoremap <leader>li :<C-u>LspImplementation<CR>
nnoremap <leader>pg :<C-u>LspPeekDefinition<CR>
nnoremap <leader>pd :<C-u>LspPeekDeclaration<CR>
nnoremap <leader>pi :<C-u>LspPeekImplementation<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set tags+=./tags
"set tagbsearch

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" unite
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:unite_source_gtags_ref_option="r"
let g:unite_source_gtags_def_option=""
let g:unite_source_gtags_result_option="ctags-x"

"call unite#filters#matcher_default#use(['matcher_fuzzy'])

nnoremap <leader>gc :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/context<cr>
nnoremap <leader>gd :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/def<cr>
nnoremap <leader>gr :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/ref<cr>
nnoremap <leader>gg :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/grep<cr>
nnoremap <leader>gC :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/context:
nnoremap <leader>gD :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/def:
nnoremap <leader>gR :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/ref:
nnoremap <leader>gG :<C-u>Unite -auto-preview -buffer-name=search-buffer gtags/grep:

nnoremap <leader>cs :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/find_this_symbol:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>cg :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/global_definition:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>cd :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/functions_called_by:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>cc :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/functions_calling:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>ct :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/text_string:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>ce :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/egrep_pattern:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>cf :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/find_file:<C-R>=expand('<cword>')<CR><CR>
nnoremap <leader>ci :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/:including_this_file<C-R>=expand('<cword>')<CR><CR>

nnoremap <leader>cS :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/find_this_symbol:
nnoremap <leader>cG :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/global_definition:
nnoremap <leader>cD :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/functions_called_by:
nnoremap <leader>cC :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/functions_calling:
nnoremap <leader>cT :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/text_string:
nnoremap <leader>cE :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/egrep_pattern:
nnoremap <leader>cF :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/find_file:
nnoremap <leader>cI :<C-u>Unite -auto-preview -buffer-name=search-buffer cscope/:including_this_file

nnoremap <leader>ag :<C-u>Unite -auto-preview -buffer-name=search-buffer grep:.<CR><C-R><C-W><CR>
nnoremap <leader>aG :<C-u>Unite -auto-preview -buffer-name=search-buffer grep:.<CR>
if executable('ag')
	let g:unite_source_grep_command='ag'
	let g:unite_source_grep_default_opts='--nogroup --nocolor --column'
	let g:unite_source_grep_recursive_opt=''
endif

nnoremap <leader>, :<C-u>UniteResume search-buffer<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:fzf_layout = { 'down': '40%' }
let g:fzf_preview_window = [ 'right:50%', 'ctrl-/' ]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Only do this part when compiled with support for autocommands.
if has("autocmd")
	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
	au!

	" For all text files set 'textwidth' to 78 characters.
	autocmd FileType text setlocal textwidth=78

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid or when inside an event handler
	" (happens when dropping a file on gvim).
	" Also don't do it when the mark is in the first line, that is the default
	" position when opening a file.
	autocmd BufReadPost *
		\ if line("'\"") > 1 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif

	augroup END
else
	set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		\ | wincmd p | diffthis
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
	exe "menu Foo.Bar :" . a:str
	emenu Foo.Bar
	unmenu Foo
endfunction

function! VisualSelection(direction) range
	let l:saved_reg=@"
	execute "normal! vgvy"

	let l:pattern=escape(@", '\\/.*$^~[]')
	let l:pattern=substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
	elseif a:direction == 'replace'
		call CmdLine("%s" . '/'. l:pattern . '/')
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/=l:pattern
	let @"=l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
	if &paste
		return 'PASTE MODE  '
	en
	return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
	let l:currentBufNum=bufnr("%")
	let l:alternateBufNum=bufnr("#")

	if buflisted(l:alternateBufNum)
		buffer #
	else
		bnext
	endif

	if bufnr("%") == l:currentBufNum
		new
	endif

	if buflisted(l:currentBufNum)
		execute("bdelete! ".l:currentBufNum)
	endif
endfunction

"au BufEnter * call MyLastWindow()
function! MyLastWindow()
	" if the window is quickfix go on
	if &buftype == "quickfix"
		" if this window is last on screen quit without warning
		if winbufnr(2) == -1
			quit!
		endif
	endif
endfunction

function! SummarizeTabs()
	try
		echohl ModeMsg
		echon 'tabstop='.&l:ts
		echon ' shiftwidth='.&l:sw
		echon ' softtabstop='.&l:sts
		if &l:et
			echon ' expandtab'
		else
			echon ' noexpandtab'
		endif
	finally
		echohl None
	endtry
endfunction
command! -nargs=* Stab call SummarizeTabs()

